\relax 
\providecommand\hyper@newdestlabel[2]{}
\providecommand\HyperFirstAtBeginDocument{\AtBeginDocument}
\HyperFirstAtBeginDocument{\ifx\hyper@anchor\@undefined
\global\let\oldcontentsline\contentsline
\gdef\contentsline#1#2#3#4{\oldcontentsline{#1}{#2}{#3}}
\global\let\oldnewlabel\newlabel
\gdef\newlabel#1#2{\newlabelxx{#1}#2}
\gdef\newlabelxx#1#2#3#4#5#6{\oldnewlabel{#1}{{#2}{#3}}}
\AtEndDocument{\ifx\hyper@anchor\@undefined
\let\contentsline\oldcontentsline
\let\newlabel\oldnewlabel
\fi}
\fi}
\global\let\hyper@last\relax 
\gdef\HyperFirstAtBeginDocument#1{#1}
\providecommand*\HyPL@Entry[1]{}
\HyPL@Entry{0<</S/D>>}
\select@language{american}
\@writefile{toc}{\select@language{american}}
\@writefile{lof}{\select@language{american}}
\@writefile{lot}{\select@language{american}}
\@writefile{toc}{\contentsline {section}{\numberline {1}GraphTester.java}{1}{section.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.1}Empty constructor}{1}{subsection.1.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.2}Adding vertices}{1}{subsection.1.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.3}Removing vertices}{1}{subsection.1.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.4}Adding edges}{1}{subsection.1.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {1.5}Removing edges}{2}{subsection.1.5}}
\@writefile{toc}{\contentsline {section}{\numberline {2}LoadingTest.java}{2}{section.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.1}Non-existent files}{2}{subsection.2.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.2}Non- .txt files}{2}{subsection.2.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.3}Files with duplicate edges}{2}{subsection.2.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.4}Files with incorrect number of edges}{3}{subsection.2.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.5}Files in which the number of vertices or the number of edges is missing}{3}{subsection.2.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.6}Files that contain letters}{4}{subsection.2.6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.7}Files with edges that are not in the correct format}{4}{subsection.2.7}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.8}Empty file}{4}{subsection.2.8}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.9}Files that are in the correct format}{4}{subsection.2.9}}
\@writefile{toc}{\contentsline {subsection}{\numberline {2.10}Files that contain edges with non-existent vertices}{5}{subsection.2.10}}
\@writefile{toc}{\contentsline {section}{\numberline {3}ForceDirectedTester.java}{5}{section.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {1}{\ignorespaces This is how the loaded graph can look like. Please notice that the algorithm we chose is (pseudo-) non-deterministic. So the result and its quality can be different in each execution.}}{6}{figure.1}}
\@writefile{toc}{\contentsline {section}{\numberline {4}Dijkstratester.java}{6}{section.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.1}A path exists}{7}{subsection.4.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.2}Input of non-existing vertices}{7}{subsection.4.2}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.3}Loops}{7}{subsection.4.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.4}Isolated start vertex}{7}{subsection.4.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.5}Isolated end vertex}{7}{subsection.4.5}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.6}No path and both vertices are not isolated}{7}{subsection.4.6}}
\@writefile{toc}{\contentsline {subsection}{\numberline {4.7}Empty graph}{8}{subsection.4.7}}
